/*
* Play around with it.  I would explain it but you have to discover the magic for yourself here. notes are hopefully helpful along with grid examples and the css generated.
*
* Credits/Inspiration:
* -------------------
* Profound Grid: http://www.profoundgrid.com
* Negative Grid: http://chrisplaneta.com/freebies/negativegrid-fluid-css-grid-by-chris-planeta/
*
*/
//Defualt settings (can be overridden)
//Grid for completely fluid layout, can be nested as well


$gutter_width:		0%;			//  % = fluid
$container_margin:	0%;			// px || % || auto	// if you want it auto you will have to define the width as less than 100% explicitly
$list_columns: 1, 2, 3, 4, 5, 7, 8, 12; // ONLY use real whole numbers
$class_container:	'row';		//				//
$class_column:		'col';		//				//
$class_push:		'push';		//				//
$default_columns: 12; //   // a default value for generating helper classes


@function lcm($a:0,$b:0){
	@if (($a == 0) and ($b == 0)){
		@return 0;
	}@else{
		@return ($a*$b)/gcd($a,$b);
	}
}

@function gcd($a:0, $b:0){
  @if ($b == 0) {
    @return $a;
  }@else{
		@return gcd($b, $a % $b);
	}
}

@function calc_grid_lcm(){
	$lcm_var_return: 1;
	@each $col in $list_columns {
		$lcm_var_return: lcm($lcm_var_return, $col);
	}
	@return $lcm_var_return;
}

//calculate all possible grid combinations based on lcd of all cols
$total_columns: calc_grid_lcm();

////////////////////////////////////////////////////////////////////////////////
// GRID MATH
////////////////////////////////////////////////////////////////////////////////

@function element_width($column_index){
	$not_rounded_value: (((100% + $gutter_width)/$total_columns)*$column_index)-$gutter_width;
  $not_rounded_value: $not_rounded_value * 100;
  $rounded_value: round($not_rounded_value)/100;
  @return $rounded_value;
}

@function column_width(){
	$not_rounded_value: (((100% + $gutter_width)/$total_columns))-$gutter_width;
  $not_rounded_value: $not_rounded_value * 100;
  $rounded_value: round($not_rounded_value)/100;
  @return $rounded_value * 1%;
}

@function container_width(){
	@if ($container_margin == auto){
		@return 100%;
	}
	@return 100% - (2*$container_margin);
}
////////////////////////////////////////////////////////////////////////////////
// BASIC MIXINS
////////////////////////////////////////////////////////////////////////////////

/**
 * Clearfix
 */
@mixin clearfix(){
	overflow: hidden;
	*zoom: 1;
}

/* Establish the grid-container element.  */
@mixin container(){
	@if ($container_margin == auto){
		width: 100%;
		margin: 0 $container_margin;
	}
	@else{
		width: container_width();
		margin: 0;
		padding: 0 $container_margin;
	}
}

/* Align an element to the grid. */
@mixin place($_columns_width, $_padding_columns:null){
	float: left;
	margin-right: -100%;
	$_width_perc: element_width($_columns_width);
    width: $_width_perc;

    @if($_padding_columns != null){
    	@include push($_padding_columns);
    }
}


@mixin push($_column_index){
	$_width_perc: ($gutter_width + element_width($_column_index));
	margin-left: $_width_perc;
}


////////////////////////////////////////////////////////////////////////////////
// HELPER CLASSES
////////////////////////////////////////////////////////////////////////////////

@mixin generate_helper_classes($_cols_per_row: $default_columns ){

	/* Helper Class: Container */
	.#{$class_container}{
		@include container();
	}

	/* Helper Class: Columns */
	@for $i from 1 through ($_cols_per_row){
		.#{$class_column}#{$i}-#{$_cols_per_row} {
			@include place(($total_columns/$_cols_per_row) * $i)
		}
	}

	/* Helper Class: Horizontal Position */
	@for $i from 0 through ($_cols_per_row - 1){
	.#{$class_push}#{$i}-#{$_cols_per_row} {
			@include push(($total_columns/$_cols_per_row) * $i);
		}
	}

}

@mixin generate_grid_positions($_column_selector, $_element_width){

	$_cols_per_row: floor($total_columns / $_element_width);

	// create rule for each element
	@for $i from 1 through $_cols_per_row{

		#{$_column_selector}:nth-child(#{$_cols_per_row}n+#{$i}){
			@include push((($i - 1)*$_element_width));
			margin-bottom: $gutter_width;
			@if ($i == 1) {
				clear: both;
				@include clearfix();
			}@else{
				clear: none;
			}
		}
	}
}
